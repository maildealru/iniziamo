// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package parser

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42239ddeDecodeGithubComMaildealruIniziamoPkgParser(in *jlexer.Lexer, out *paramInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "optional":
			out.Optional = bool(in.Bool())
		case "default":
			if m, ok := out.DefaultValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DefaultValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DefaultValue = in.Interface()
			}
		case "const":
			if m, ok := out.ConstValue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ConstValue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ConstValue = in.Interface()
			}
		case "config":
			out.ConfigVarName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComMaildealruIniziamoPkgParser(out *jwriter.Writer, in paramInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(in.Optional))
	}
	{
		const prefix string = ",\"default\":"
		out.RawString(prefix)
		if m, ok := in.DefaultValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DefaultValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DefaultValue))
		}
	}
	{
		const prefix string = ",\"const\":"
		out.RawString(prefix)
		if m, ok := in.ConstValue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ConstValue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ConstValue))
		}
	}
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix)
		out.String(string(in.ConfigVarName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v paramInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComMaildealruIniziamoPkgParser(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v paramInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComMaildealruIniziamoPkgParser(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *paramInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComMaildealruIniziamoPkgParser(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *paramInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComMaildealruIniziamoPkgParser(l, v)
}
func easyjson42239ddeDecodeGithubComMaildealruIniziamoPkgParser1(in *jlexer.Lexer, out *callInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "path":
			out.PathFmt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42239ddeEncodeGithubComMaildealruIniziamoPkgParser1(out *jwriter.Writer, in callInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.PathFmt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v callInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42239ddeEncodeGithubComMaildealruIniziamoPkgParser1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v callInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42239ddeEncodeGithubComMaildealruIniziamoPkgParser1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *callInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42239ddeDecodeGithubComMaildealruIniziamoPkgParser1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *callInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42239ddeDecodeGithubComMaildealruIniziamoPkgParser1(l, v)
}
